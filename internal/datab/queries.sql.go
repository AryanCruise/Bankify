// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, user_name, account_balance, account_type, create_pin) VALUES ($1, $2, $3, $4, $5)
RETURNING account_id, user_id, user_name, account_balance, account_type, create_pin, created_at
`

type CreateAccountParams struct {
	UserID         int32
	UserName       string
	AccountBalance float64
	AccountType    string
	CreatePin      int32
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.UserID,
		arg.UserName,
		arg.AccountBalance,
		arg.AccountType,
		arg.CreatePin,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.UserName,
		&i.AccountBalance,
		&i.AccountType,
		&i.CreatePin,
		&i.CreatedAt,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (account_id, amount, transaction_type) VALUES ($1, $2, $3)
RETURNING transaction_id, account_id, amount, transaction_type, created_at
`

type CreateTransactionParams struct {
	AccountID       int32
	Amount          float64
	TransactionType string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.AccountID, arg.Amount, arg.TransactionType)
	var i Transaction
	err := row.Scan(
		&i.TransactionID,
		&i.AccountID,
		&i.Amount,
		&i.TransactionType,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name, email_id, country_code, phone_no, password_hash) VALUES ($1, $2, $3, $4, $5)
RETURNING user_id, user_name, email_id, country_code, phone_no, password_hash, created_at
`

type CreateUserParams struct {
	UserName     string
	EmailID      string
	CountryCode  string
	PhoneNo      string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserName,
		arg.EmailID,
		arg.CountryCode,
		arg.PhoneNo,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.EmailID,
		&i.CountryCode,
		&i.PhoneNo,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, user_id, user_name, account_balance, account_type, create_pin, created_at FROM accounts WHERE account_id = $1::INT
`

func (q *Queries) GetAccount(ctx context.Context, dollar_1 int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, dollar_1)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.UserName,
		&i.AccountBalance,
		&i.AccountType,
		&i.CreatePin,
		&i.CreatedAt,
	)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT account_balance FROM accounts WHERE account_id = $1::INT
`

func (q *Queries) GetBalance(ctx context.Context, dollar_1 int32) (float64, error) {
	row := q.db.QueryRowContext(ctx, getBalance, dollar_1)
	var account_balance float64
	err := row.Scan(&account_balance)
	return account_balance, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT user_id, user_name, email_id, phone_no, country_code, password_hash FROM users WHERE user_id = $1
`

type GetUserByUserIDRow struct {
	UserID       int32
	UserName     string
	EmailID      string
	PhoneNo      string
	CountryCode  string
	PasswordHash string
}

func (q *Queries) GetUserByUserID(ctx context.Context, userID int32) (GetUserByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserID, userID)
	var i GetUserByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.EmailID,
		&i.PhoneNo,
		&i.CountryCode,
		&i.PasswordHash,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT user_id, user_name, email_id, phone_no, country_code, password_hash FROM users WHERE user_name = $1
`

type GetUserByUserNameRow struct {
	UserID       int32
	UserName     string
	EmailID      string
	PhoneNo      string
	CountryCode  string
	PasswordHash string
}

func (q *Queries) GetUserByUserName(ctx context.Context, userName string) (GetUserByUserNameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, userName)
	var i GetUserByUserNameRow
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.EmailID,
		&i.PhoneNo,
		&i.CountryCode,
		&i.PasswordHash,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
SET 
    user_name = COALESCE($2, user_name),
    account_balance = COALESCE($3, account_balance),
    account_type = COALESCE($4, account_type)
WHERE account_id = $1
`

type UpdateAccountParams struct {
	AccountID      int32
	UserName       string
	AccountBalance float64
	AccountType    string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount,
		arg.AccountID,
		arg.UserName,
		arg.AccountBalance,
		arg.AccountType,
	)
	return err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE accounts
SET account_balance = account_balance + $2
WHERE account_id = $1
RETURNING account_balance
`

type UpdateBalanceParams struct {
	AccountID      int32
	AccountBalance float64
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, updateBalance, arg.AccountID, arg.AccountBalance)
	var account_balance float64
	err := row.Scan(&account_balance)
	return account_balance, err
}
